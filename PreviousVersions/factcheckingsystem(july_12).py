# -*- coding: utf-8 -*-
"""FactCheckingSystem(July-12).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fa7BjpY01rXl1REIG34n1afUeVeoRSh3
"""

!pip install transformers hydra_core omegaconf

from transformers import pipeline
unmasker = pipeline('fill-mask', model = 'distilbert-base-uncased')
import re
import spacy
sp = spacy.load('en_core_web_sm')
import string

def listToString(s): 
    
    # initialize an empty string
    str1 = " " 
    
    # return string  
    return (str1.join(s))

def findAccuracy (userInput): 

  word = seperateCharacters(userInput)

  length = len(word)

  articleList = ["a", "an", "the"]

  i = 0
  j = 0
  k = 0
  rating = 0
  newInput = ""
  innacurateList = []
  accurateCounter = 0;

  counterBig = 0
  counterSmall = 0
  weightRatingBig = 0
  weightRatingSmall = 0

  weightBig = 80
  weightSmall = 20

  for i in range(length):

    weight = weightBig #in percent
    predRating = 0
    predRating2 = 0

    sen = sp(word[i])

    # how sen function works and results
    # https://stackoverflow.com/questions/40288323/what-do-spacys-part-of-speech-and-dependency-tags-mean

    if (sen[0].pos_ == 'ADP' or sen[0].pos_ == 'CONJ'
      or sen[0].pos_ == 'CCONJ' or sen[0].pos_ == 'DET'
      or sen[0].pos_ == 'PART' or sen[0].pos_ == 'PUNCT' 
      or sen[0].pos_ == 'SCONJ' or sen[0].pos_ == 'SYM'
      or sen[0].pos_ == 'X' or word[i] in articleList):

      weight = weightSmall
     # counterSmall += 1
    #else:
    #  counterBig += 1
  
    maskList = word.copy()
    maskList2 = word.copy()
    maskList[i] = "[MASK]"
    newInput = listToString(maskList)
    
    preds = unmasker(newInput)

    predList = []

    for pred in preds:
      predList.append(pred["token_str"])

    for pred in preds:

      for k in range(len(preds)):
        if (pred["score"] > predRating2):
          predRating2 = pred["score"]
  
      if (pred["token_str"] == maskList2[i].lower()):
        
        predRating = pred["score"]
        '''
        if (weight == weightSmall):

          #if (predRating2 > predRating):
           # weightRatingSmall += 0.3 + predRating
          #else: 
          weightRatingSmall += predRating

          counterSmall += 1
        else:

          #if (predRating2 > predRating):
           # weightRatingBig += 0.6 + predRating
          #else: 
          weightRatingBig += predRating

          counterBig += 1
        '''

       

        if (predRating == predRating2):
          if (weight == weightSmall):
            weightRatingSmall += predRating
            counterSmall += 1

          else:
            weightRatingBig += predRating
            counterBig += 1

          accurateCounter += 1
          #print(weight, pred["token_str"], predRating)

          break
        elif (word[i] in articleList):
          weightRatingSmall += predRating
          counterSmall += 1
          accurateCounter += 1
        else:
          if innacurateList.count(i) == 0:
            innacurateList.append(i)  
    
            

      if (maskList2[i] not in predList):
        if innacurateList.count(i) == 0:
          innacurateList.append(i)

    #if (i not in innacurateList):
      #print(word[i], weight, predRating)      
  

  if (counterSmall == 0 and counterBig == 0):
    rating = 0
  elif (counterSmall == 0 or counterBig == 0):
    if (counterSmall == 0):
      weightRatingBig = (weightRatingBig / counterBig) * weightBig
      rating = (weightRatingBig) / 100

    else:
      weightRatingSmall = (weightRatingSmall / counterSmall) * weightSmall
      rating = (weightRatingSmall) / 100
  else:
    weightRatingSmall = (weightRatingSmall / counterSmall) * weightSmall
    weightRatingBig = (weightRatingBig / counterBig) * weightBig

    rating = (weightRatingSmall + weightRatingBig) / 100  

  #rating += ((accurateCounter / length)) / 4
  #rating -= len(innacurateList) * 0.02

  if (accurateCounter >= 1):
    print(accurateCounter, "/", length, " accurate predictions found")
  else:
    print("no accurate predictions found")

  #print(counterSmall)
  #print(counterBig)

  return rating, innacurateList, accurateCounter / length

def seperateCharacters(userInput):
  pat = re.compile(r"([,:;@#$%&^.()!?])")

  
  userInput = pat.sub(" \\1 ", userInput)
  words = userInput.split()

  return words

def combineString(userInput):

  userInput = listToString(userInput)

  for i in userInput:
    if i in string.punctuation:
      userInput[i-1] = ""

def sentenceCorrection(userText, inncorrectWords):

  i = 0
  word = seperateCharacters(userInput)
  predRating = 0
  predString = ""
  newInput = ""
  correctedString = ""
  replaceWords = []

  weightBig = 80
  weightSmall = 20

  for i in range(len(inncorrectWords)):
    
    predRating = 0
    predString = ""

    maskList = word.copy()
    maskList[inncorrectWords[i]] = "[MASK]"
    newInput = listToString(maskList)

    preds = unmasker(newInput)
    
    for pred in preds:

      for k in range(len(preds)):


        if (pred["score"] > predRating):
          predRating = pred["score"]
          predString = pred["token_str"]
    

    replaceWords.append(predString)
  
  for j in range(len(inncorrectWords)):
    word[inncorrectWords[j]] = replaceWords[j]
  
  newInput = listToString(word)
  #newInput = combineString(newInput)


  return newInput

userInput = input("Enter your text: ")
accuracy = findAccuracy(userInput)
print("\nModule prediction accuracy rating (0 - 1): ", accuracy[0], 
      "\nModule Predicition accuracy rating (%):    ", accuracy[0] * 100, 
      "%\n", "Accuracy Rating: ", accuracy[2], "    ", accuracy[1])
newstring = sentenceCorrection(userInput, accuracy[1])

print("\n", newstring)

"""Output Document

**July 9, 2021**

```
Neil Armstrong, an astronaut, was the first man on the moon. : 
Module prediction accuracy rating (0 - 1):  0.5222103953361511 
Module Predicition accuracy rating (%):     52.22103953361511 %
 Accuracy Rating:  0.7142857142857143
```

```
David Beckham played soccer, a sport also referred to as football. : 
Module prediction accuracy rating (0 - 1):  0.9373887574672699 
Module Predicition accuracy rating (%):     93.73887574672699 %
 Accuracy Rating:  0.5384615384615384
```

```
Module prediction accuracy rating (0 - 1):  0.2254219631354014 
Module prediction accuracy rating (0 - 1):  0.2254219631354014 
Module Predicition accuracy rating (%):     22.54219631354014 %
 Accuracy Rating:  0.5
```

```
Barack Obama was the 44th President of the United States. : 
Module prediction accuracy rating (0 - 1):  0.8804009824991226 
Module Predicition accuracy rating (%):     88.04009824991226 %
 Accuracy Rating:  0.9090909090909091
```

```
Barack Obama was the 45th President of the United States. : 
Module prediction accuracy rating (0 - 1):  0.9968274366855622 
Module Predicition accuracy rating (%):     99.68274366855621 %
 Accuracy Rating:  0.8181818181818182
```

```
Barack Obama was the president of Canada. : 
Module prediction accuracy rating (0 - 1):  0.9008845516790945 
Module Predicition accuracy rating (%):     90.08845516790946 %
 Accuracy Rating:  0.75
```

```
Barack Obama was the prime minister of Canada. : 
Module prediction accuracy rating (0 - 1):  0.9120560308297475 
Module Predicition accuracy rating (%):     91.20560308297475 %
 Accuracy Rating:  0.7777777777777778
```
"""